"""
Django settings for strawberry_test project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
from gqlauth.settings_type import GqlAuthSettings, username_field, email_field, password_field, id_field

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w6)2n(!%f63%vy^39*i6(-$q8!ibn^3c#wr+3r5xl)z-i7qu6e'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'async_test',
    'gqlauth',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'strawberry_test.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'strawberry_test.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# gqlauth

GQL_AUTH = GqlAuthSettings(
    ALLOW_LOGIN_NOT_VERIFIED=True,
    LOGIN_FIELDS={username_field, password_field},
    LOGIN_REQUIRE_CAPTCHA=False,
    REGISTER_MUTATION_FIELDS={username_field},
    REGISTER_REQUIRE_CAPTCHA=False,
    CAPTCHA_EXPIRATION_DELTA=timedelta(seconds=120),
    CAPTCHA_MAX_RETRIES=5,
    # CAPTCHA_TEXT_FACTORY=default_text_factory,
    # CAPTCHA_TEXT_VALIDATOR=default_captcha_text_validator,
    FORCE_SHOW_CAPTCHA=False,
    CAPTCHA_SAVE_IMAGE=False,
    UPDATE_MUTATION_FIELDS={},

    # email tokens
    EXPIRATION_ACTIVATION_TOKEN=timedelta(days=7),
    EXPIRATION_PASSWORD_RESET_TOKEN=timedelta(hours=1),
    EXPIRATION_PASSWORD_SET_TOKEN=timedelta(hours=1),

    # email stuff
    #EMAIL_FROM: DjangoSetting[str] = DjangoSetting("DEFAULT_FROM_EMAIL")
    SEND_ACTIVATION_EMAIL=True,
    ACTIVATION_PATH_ON_EMAIL="activate",
    PASSWORD_SET_PATH_ON_EMAIL="password-set",
    PASSWORD_RESET_PATH_ON_EMAIL="password-reset",

    # email subjects templates
    EMAIL_SUBJECT_ACTIVATION="email/activation_subject.txt",
    EMAIL_SUBJECT_ACTIVATION_RESEND="email/activation_subject.txt",
    EMAIL_SUBJECT_PASSWORD_SET="email/password_set_subject.txt",
    EMAIL_SUBJECT_PASSWORD_RESET="email/password_reset_subject.txt",

    # email templates
    EMAIL_TEMPLATE_ACTIVATION="email/activation_email.html",
    EMAIL_TEMPLATE_ACTIVATION_RESEND="email/activation_email.html",
    EMAIL_TEMPLATE_PASSWORD_SET="email/password_set_email.html",
    EMAIL_TEMPLATE_PASSWORD_RESET="email/password_reset_email.html",
    #EMAIL_TEMPLATE_VARIABLES=field(default_factory=lambda: {}),

    # others
    ALLOW_DELETE_ACCOUNT=False,
    ALLOW_PASSWORDLESS_REGISTRATION=False,
    SEND_PASSWORD_SET_EMAIL=False,

    # JWT stuff
    #  JWT_SECRET_KEY=DjangoSetting("SECRET_KEY")
    JWT_ALGORITHM="HS256",
    JWT_TIME_FORMAT="%Y-%m-%dT%H:%M:%S.%f",
    #  JWT_PAYLOAD_HANDLER: Callable[["UserProto"], "TokenType"] = create_token_type
    JWT_PAYLOAD_PK=id_field,
    #  JWT_DECODE_HANDLER: Callable[[str], "TokenType"] = decode_jwt
    #  JWT_TOKEN_FINDER: Callable[[Union["HttpRequest", dict]], Optional[str]] = token_finder
    JWT_EXPIRATION_DELTA=timedelta(minutes=5),
    JWT_LONG_RUNNING_REFRESH_TOKEN=True,
    JWT_REFRESH_TOKEN_N_BYTES=20,
    JWT_REFRESH_EXPIRATION_DELTA=timedelta(days=7),
)
